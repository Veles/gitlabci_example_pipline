stages:
  - build
  - test
  - config
  - deploy

nginx-build:
  stage: build
  tags: 
    - docker
  image:
    name: docker:stable
  services:
   - name: docker:dind
     alias: dockerdaemon
  variables:
    DOCKER_HOST: tcp://dockerdaemon:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    IMAGE_NAME: "nginx"
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - cd build/nginx
    - docker build --cache-from $CI_REGISTRY/$CI_PROJECT_PATH/$IMAGE_NAME:latest -t $CI_REGISTRY/$CI_PROJECT_PATH/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA  .
    - docker run -d --name nginx "$CI_REGISTRY/$CI_PROJECT_PATH/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA"
    - docker exec  $IMAGE_NAME nginx -t
    - docker rm -f $IMAGE_NAME
    - IMAGE_ID=$(docker images | grep $CI_REGISTRY/$CI_PROJECT_PATH\/$IMAGE_NAME | awk '{print $3}')
    - docker tag $IMAGE_ID $CI_REGISTRY/$CI_PROJECT_PATH/$IMAGE_NAME:latest
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH/$IMAGE_NAME:latest


site-build:
  stage: build
  tags: 
    - shell
  image:
    name: docker:stable
  services:
   - name: docker:dind
     alias: dockerdaemon
  variables:
    DOCKER_HOST: tcp://dockerdaemon:2375/
    DOCKER_DRIVER: overlay2 
    DOCKER_TLS_CERTDIR: ""
  script:
   - cd build/
   - rm site/ -rf
   - git clone https://github.com/banago/simple-php-website.git site 
   - tar -czf site.tar.gz site
  artifacts:
    paths:
      - build/site.tar.gz
    expire_in: 10 minutes


php-build:
  stage: build
  tags: 
    - docker
  image:
    name: docker:stable
  services:
   - name: docker:dind
     alias: dockerdaemon
  variables:
    DOCKER_HOST: tcp://dockerdaemon:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    IMAGE_NAME: "php"
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - cd build/php
    - docker build --cache-from $CI_REGISTRY/$CI_PROJECT_PATH/$IMAGE_NAME:latest -t $CI_REGISTRY/$CI_PROJECT_PATH/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA  .
    - IMAGE_ID=$(docker images | grep $CI_REGISTRY/$CI_PROJECT_PATH\/$IMAGE_NAME | awk '{print $3}')
    - docker tag $IMAGE_ID $CI_REGISTRY/$CI_PROJECT_PATH/$IMAGE_NAME:latest
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH/$IMAGE_NAME:latest


nginx-test:
  needs: 
    - job: nginx-build
      optional: true
  stage: test
  tags: 
    - docker
  image:
    name: docker:stable
  services:
   - name: docker:dind
     alias: dockerdaemon
  variables:
    DOCKER_HOST: tcp://dockerdaemon:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker pull $CI_REGISTRY/$CI_PROJECT_PATH/nginx:latest
    - docker run --rm --name test_nginx $CI_REGISTRY/$CI_PROJECT_PATH/nginx:latest nginx -t

php-test:
  stage: test 
  needs: 
    - job: php-build
      optional: true
  tags: 
    - docker
  image:
    name: docker:stable
  services:
   - name: docker:dind
     alias: dockerdaemon
  variables:
    DOCKER_HOST: tcp://dockerdaemon:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker pull $CI_REGISTRY/$CI_PROJECT_PATH/nginx:latest
    - docker run --rm --name test_php $CI_REGISTRY/$CI_PROJECT_PATH/php:latest /usr/sbin/php-fpm -v


deploy-prod:
  needs:
    - job: php-test
      optional: false
    - job: nginx-test
      optional: false
    - job: site-build
      artifacts: true
  tags: 
  -  shell
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY_PROD" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - echo -e "UserKnownHostsFile=/dev/null" >> ~/.ssh/config
  stage: deploy
  script:
    - ssh root@ruvpn.derunix.ru docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY" 
    - ssh root@ruvpn.derunix.ru docker pull "$CI_REGISTRY/$CI_PROJECT_PATH/nginx:latest"
    - ssh root@ruvpn.derunix.ru docker stop nginx && docker rm nginx
    - ssh root@ruvpn.derunix.ru docker run -d --name nginx —-hostname nginx -p 80:80 -p 443:443 --restart=always  -v /etc/letsencrypt:/etc/letsencrypt -v /etc/nginx:/etc/nginx  "$CI_REGISTRY/$CI_PROJECT_PATH/nginx:latest"
    - ssh root@ruvpn.derunix.ru docker pull "$CI_REGISTRY/$CI_PROJECT_PATH/php:latest"
    - ssh root@ruvpn.derunix.ru docker stop php && docker rm php
    - ssh root@ruvpn.derunix.ru docker run -d --name php —hostname php --restart=always -v /www/public:/www/public  "$CI_REGISTRY/$CI_PROJECT_PATH/php:latest"  
    - ssh root@ruvpn.derunix.ru rm -rf /www/public && mkdir -p /www/public  && tar -xzf build/site.tar.gz -C /www/public/
  environment:    
    name: prod
    url: https://ruvpn.derunix.ru
  

config-prod:
  tags: 
  -  shell
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY_PROD" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - echo -e "UserKnownHostsFile=/dev/null" >> ~/.ssh/config
  stage: config
  script:
    - scp  -o StrictHostKeyChecking=no  nginx.conf root@ruvpn.derunix.ru:/etc/nginx/nginx.conf
    - ssh root@ruvpn.derunix.ru docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"  
    -  ssh root@ruvpn.derunix.ru docker network rm web || true
    -  ssh root@ruvpn.derunix.ru docker network create web || true
    -  ssh root@ruvpn.derunix.ru docker rm -f php
    -  ssh root@ruvpn.derunix.ru docker run --name php -d --net web gitlab.derunix.ru:5050/derunix/test-project/php:latest
    -  ssh root@ruvpn.derunix.ru docker run --name nginx-test-i --rm --net web -v /etc/letsencrypt:/etc/letsencrypt -v /etc/nginx:/etc/nginx   gitlab.derunix.ru:5050/derunix/test-project/nginx:latest nginx -t
  environment:
    name: prod
    url: https://ruvpn.derunix.ru

